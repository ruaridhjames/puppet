# -*- mode: ruby -*-
# vi: set ft=ruby :

$puppet = <<-SCRIPT
echo 172.31.0.20 puppet >> /etc/hosts
sudo wget http://apt.puppetlabs.com/puppetlabs-release-trusty.deb
sudo dpkg -i puppetlabs-release-trusty.deb
sudo apt-get update
sudo apt-get install puppet -y
sudo sed -i '/\\[main\\]/ a certname = worker-02\\nserver = puppet\\nenvironment = production\\nruninterval = 15m' /etc/puppet/puppet.conf
sudo systemctl start puppet
sudo systemctl enable puppet
SCRIPT

$script = <<-SCRIPT
sudo -i

apt update
apt upgrade -y

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

apt-get install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt install docker-ce -y
cat > /etc/docker/daemon.json <<EOF
{
   "exec-opts": ["native.cgroupdriver=systemd"],
   "log-driver": "json-file",
   "log-opts": {
        "max-size": "100m"
   },
   "storage-driver": "overlay2"
}
EOF

mkdir -p /etc/systemd/system/docker.service.d
systemctl daemon-reload
systemctl restart docker
systemctl enable docker

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt update
apt install kubernetes-cni kubelet kubeadm kubectl nfs-common -y
apt-mark hold kubelet kubeadm kubectl
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=172.31.0.21"' >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

systemctl daemon-reload
systemctl restart kubelet

SCRIPT

# To get the intial admin password, connect to the VM and use:
# kubectl exec -it jenkins-6db4b8c697-hlbjl -- /bin/bash
# cat /var/lib/docker/volumes/jenkins_home/_data/secrets/initialAdminPassword


Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/bionic64"

  config.vm.define "worker-02" do |worker02|
    worker02.vm.hostname = "worker-02"
    worker02.vm.network "private_network", ip: "172.31.0.31"
    worker02.vm.provision "shell", inline: $puppet
    worker02.vm.provision "shell", inline: $script
  end

  config.vm.provider :virtualbox do |p|
    p.gui = false
    p.customize ["modifyvm", :id, "--memory", 2048]
    p.customize ["modifyvm", :id, "--cpus", 2]
  end

end